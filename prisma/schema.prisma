// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  email String @unique
  firstName String?
  lastName String?
  password String
  evidence Evidence?
  transaction Transaction[]
  wallet Wallets?
  ipfs Ipfs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Wallets {
  id Int @default(autoincrement()) @id
  address String @unique
  privateKey String?
  publicKey String
  phrase String
  balance BigInt?
  
  userId Int @unique
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("wallets")
}

model Transaction {
  id Int @default(autoincrement()) @id
  from String
  to String
  amount BigInt
  userId Int
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transactions")
}

model Evidence {
  id Int @default(autoincrement()) @id
  status String
  userId Int @unique
  user User @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("evidences")
}

model Ipfs {
  id Int @default(autoincrement()) @id
  name String
  folderCid String @unique
  linkIpfs String?
  sizeFolder Float?

  userId Int
  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("ipfs")
}